# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "Schemas update checker"

on:
  push:
    paths: [".github/workflows/**"]
  pull_request:
    branches: ["*"]
  schedule:
    - cron: "50 03 * * *"
  workflow_dispatch:

permissions: {}

jobs:
  check-k3s-versions:
    name: "Check K3s versions"
    runs-on: "ubuntu-latest"
    permissions:
      contents: "read"
    outputs:
      k3s-versions: "${{ steps.k3s-versions.outputs.result }}"
    steps:
      - name: "Check K3s versions"
        uses: "actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea"
        id: "k3s-versions"
        with:
          result-encoding: "json"
          script: |
            const apiUrl = "https://hub.docker.com/v2/namespaces/rancher/repositories/k3s/tags?page_size=100";
            const fetchTags = async (url, tags = [], limit = 300) => {
              const response = await fetch(url);
              const data = await response.json();
              tags.push(...data.results.map((result) => result.name));
              return data.next && (limit === -1 || tags.length < limit)
                ? fetchTags(data.next, tags, limit)
                : tags;
            };
            const latestVersions = (await fetchTags(apiUrl))
              .filter((tag) => /v[0-9]+(\.[0-9]+)+[+-]k3s[0-9]+$/.test(tag))
              .sort((a, b) => a.localeCompare(b, undefined, { numeric: true }))
              .slice(-20);
            console.log("Latest K3s versions:", latestVersions);
            const newVersions = [];
            for await (const version of latestVersions) {
              try {
                await github.rest.git.getRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/schemas/${version}`,
                });
              } catch (error) {
                if (error.status === 404) {
                  newVersions.push(version);
                } else {
                  throw error;
                }
              }
            }
            console.log("New K3s versions:", newVersions);
            return newVersions;

  generate-schemas:
    name: "Generate schemas for K3s ${{ matrix.k3s-version }}"
    uses: "./.github/workflows/generate-schemas.yml"
    needs: ["check-k3s-versions"]
    if: >-
      github.ref_name == github.event.repository.default_branch
        && contains(fromJSON('["schedule", "workflow_dispatch"]'), github.event_name)
        && fromJSON(needs.check-k3s-versions.outputs.k3s-versions)[0] != null
    permissions:
      contents: "write"
    strategy:
      fail-fast: false
      matrix:
        k3s-version: "${{ fromJSON(needs.check-k3s-versions.outputs.k3s-versions) }}"
    with:
      k3s-version: "${{ matrix.k3s-version }}"
